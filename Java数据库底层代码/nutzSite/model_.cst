<%@ Template Language="C#" TargetLanguage="Java" Encoding="UTF-8" ResponseEncoding="UTF-8"%>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
package io.nutz.nutzsite.module.cms.models._;

import io.nutz.nutzsite.common.base.BaseModel;
import io.nutz.nutzsite.module.sys.models.User;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.nutz.dao.entity.annotation.*;
import org.nutz.dao.interceptor.annotation.PrevInsert;

import java.io.Serializable;
import java.util.Date;
 
/**
*Name: <%=SourceTable.Name%>
*Author: Caicai
*Date: <%= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") %>
*Description: <%= FilterString(SourceTable.Description)%>
*/ 

public class <%= GetClassName(SourceTable) %>_ extends BaseModel implements Serializable {
    private static final long serialVersionUID = 1L;

    //#region private fields

	<% for (int i = 0; i < SourceTable.Columns.Count; i++) { 
    bool isPk = SourceTable.Columns[i].IsPrimaryKeyMember;
    string description = FilterString(SourceTable.Columns[i].Description);
    string varType = GetCSharpVariableType(SourceTable.Columns[i]);
    %>
    <% if (!String.IsNullOrEmpty(description)){%>
    /**
    *<%=description%>
    */
    <%}%>
    <% if (isPk){%>
    <% if(varType=="String") {%>
    @Name
    @PrevInsert(uu32=true)
    <%}else{%>
    @Id
    <%}%>
    <%}%>
    @Column("<%= SourceTable.Columns[i].Name %>")
    @Comment("<%=description%>")
    private <%=varType%> <%= GetCamelCaseName(SourceTable.Columns[i].Name) %>;
    <% if (i < SourceTable.Columns.Count - 1) Response.Write("\r\n"); %>
    <%}%>
    
    //#endregion
    
    
    //#region getter and setter
    <% for (int i = 0; i < SourceTable.Columns.Count; i++) {%>
    <%if(GetIsOverride(SourceTable.Columns[i])){%>
    @Override
    <%} %>
    public <%= GetCSharpVariableType(SourceTable.Columns[i]) %> <%=GetCamelCaseName("get_"+SourceTable.Columns[i].Name)%>() {
        return <%= GetCamelCaseName(SourceTable.Columns[i].Name) %>;
    }
    <%if(GetIsOverride(SourceTable.Columns[i])){%>
    @Override
    <%} %>
    public void <%=GetCamelCaseName("set_"+SourceTable.Columns[i].Name)%>(<%= GetCSharpVariableType(SourceTable.Columns[i]) %> <%= GetCamelCaseName(SourceTable.Columns[i].Name) %>) {
        this.<%= GetCamelCaseName(SourceTable.Columns[i].Name) %> = <%= GetCamelCaseName(SourceTable.Columns[i].Name) %>;
    }
    <%}%>
    //#endregion
    
    //#region others
    @Override
    public String toString() {
        return new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)
        <% for (int i = 0; i < SourceTable.Columns.Count; i++) {%>
                .append("<%= SourceTable.Columns[i].Name %>", <%=GetCamelCaseName("get_"+SourceTable.Columns[i].Name)%>())
        <%}%>
                .toString();
    }
    
    public static class ${
    <% for (int i = 0; i < SourceTable.Columns.Count; i++) {%>
        public static String <%=GetCamelCaseName(SourceTable.Columns[i].Name)%>="<%= SourceTable.Columns[i].Name %>";
    <%}%>
    }
    //#endregion
}
 
<!-- #include file="script.inc" -->