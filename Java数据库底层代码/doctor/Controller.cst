<%@ Template Language="C#" TargetLanguage="Java" Encoding="UTF-8" ResponseEncoding="UTF-8"%>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
package cn.prodoctors.admin.controller;

import cn.prodoctors.core.annotation.Access;
import cn.prodoctors.core.constant.AccessAdminConstants;
import cn.prodoctors.core.constant.HttpConstants;
import cn.prodoctors.core.dto.*;
import cn.prodoctors.core.vo.*;
import cn.prodoctors.core.utils.StringUtil;
import org.apache.commons.lang.StringEscapeUtils;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import tk.mybatis.mapper.entity.Example;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import cn.prodoctors.service.mybatis.domain2.<%= GetClassName(SourceTable) %>;
import cn.prodoctors.service.mybatis.service2.<%= GetClassName(SourceTable) %>Service;
import cn.prodoctors.core.dto.common.ComboxDTO;
import java.util.List;

import static cn.prodoctors.core.constant.AccessAdminConstants.*;
 

/**
*Name: <%=SourceTable.Description%>控制器
*Author: Caicai
*Date: <%= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") %>
*Description: <%= String.Format("Copyright {0} CCai", DateTime.Now.ToString("yyyy")) %>
*/ 
@Api(value="<%=SourceTable.Description%>相关API",tags={"<%=SourceTable.Description%>相关API"})
@RestController
@RequestMapping("/api/admin/<%= GetVarName(SourceTable) %>")
@Access(AccessAdminConstants.<%= GetClassName(SourceTable).ToUpper() %>)
public class <%= GetClassName(SourceTable) %>Controller extends  BaseController{
    @Autowired
    private <%= GetClassName(SourceTable) %>Service <%= GetVarName(SourceTable) %>Service;

    private HttpServletRequest request;
    protected HttpServletResponse response;

    @ModelAttribute
    public void setReqAndRes(HttpServletRequest req, HttpServletResponse res) {
        this.request = req;
        this.response = res;
    }

    @ApiOperation("详情")
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @Access(value = AccessAdminConstants.<%= GetClassName(SourceTable).ToUpper() %>_GET)
    public CommonResponse<<%= GetClassName(SourceTable) %>DTO> get(@PathVariable("id") String id) {

        <%= GetClassName(SourceTable) %>DTO ret = <%= GetVarName(SourceTable) %>Service.getOne(id);
        return new CommonResponse(ret);
    }

    @ApiOperation("删除")
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @Access(value = AccessAdminConstants.<%= GetClassName(SourceTable).ToUpper() %>_DELETE)
    public CommonResponse<Boolean> delete(@AuthenticationPrincipal JwtUser jwtUser, @PathVariable("id") String id) {

        boolean ret = <%= GetVarName(SourceTable) %>Service.deleteLogic(jwtUser, id);
        return new CommonResponse(ret);
    }

    @ApiOperation("新增")
    @RequestMapping(method = RequestMethod.POST)
    @Access(value = AccessAdminConstants.<%= GetClassName(SourceTable).ToUpper() %>_CREATE)
    public CommonResponse<<%= GetClassName(SourceTable) %>DTO> create(@AuthenticationPrincipal JwtUser jwtUser,
                                                 @Valid @RequestBody <%= GetClassName(SourceTable) %>VO <%= GetVarName(SourceTable) %>VO, BindingResult bindingResult) {
        if (bindingResult.hasErrors()) {
            return new CommonResponse<>(bindingResult.getErrorCount(), bindingResult.getFieldError().getDefaultMessage());
        }
        <%= GetClassName(SourceTable) %>DTO ret = <%= GetVarName(SourceTable) %>Service.add(jwtUser,<%= GetVarName(SourceTable) %>VO);
        return new CommonResponse(ret);
    }
    
    @ApiOperation("编辑")
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @Access(value = AccessAdminConstants.<%= GetClassName(SourceTable).ToUpper() %>_EDIT)
    public CommonResponse<<%= GetClassName(SourceTable) %>DTO> edit(@AuthenticationPrincipal JwtUser jwtUser,
                                                 @PathVariable(required = false,name = "id") String id,
                                                 @Valid @RequestBody <%= GetClassName(SourceTable) %>VO <%= GetVarName(SourceTable) %>VO, BindingResult bindingResult) {
        if (bindingResult.hasErrors()) {
            return new CommonResponse<>(bindingResult.getErrorCount(), bindingResult.getFieldError().getDefaultMessage());
        }
        <%= GetClassName(SourceTable) %>DTO ret = <%= GetVarName(SourceTable) %>Service.edit(jwtUser,<%= GetVarName(SourceTable) %>VO, id);
        return new CommonResponse(ret);
    }


    @ApiOperation("分页列表")
    @RequestMapping(value = "/page", method = RequestMethod.GET)
    @Access(value = AccessAdminConstants.<%= GetClassName(SourceTable).ToUpper() %>_PAGE)
    public CommonPagerResponse<<%= GetClassName(SourceTable) %>DTO> page(
    <% for (int i = 0; i < SourceTable.Columns.Count; i++) {%>
        @RequestParam(required = false,value = "<%=GetCamelCaseName(SourceTable.Columns[i].Name)%>") <%= GetCSharpVariableType(SourceTable.Columns[i]) %> <%=GetCamelCaseName(SourceTable.Columns[i].Name)%>,
    <%}%>
            @PageableDefault(size = HttpConstants.DEFAULT_PAGE_SIZE, sort = {HttpConstants.FIELD_SORT_TIME_CREATE}, direction = Sort.Direction.DESC)
                    Pageable pageable) {

        Example example = new Example(<%= GetClassName(SourceTable) %>.class);
        Example.Criteria criteria = example.createCriteria();

        <% for (int i = 0; i < SourceTable.Columns.Count; i++) {%>
        <%if(GetCSharpVariableType(SourceTable.Columns[i])=="String" && SourceTable.Columns[i].Size!=36){%>
        if(<%= GetCamelCaseName(SourceTable.Columns[i].Name) %> != null)
        {
            criteria.andLike(<%= GetClassName(SourceTable) %>.$.<%= GetCamelCaseName(SourceTable.Columns[i].Name) %>,"%"+ <%= GetCamelCaseName(SourceTable.Columns[i].Name) %>.trim()+ "%");
        }
        <%} else if(GetCSharpVariableType(SourceTable.Columns[i])=="String" && SourceTable.Columns[i].Size==36){%>
        if(<%= GetCamelCaseName(SourceTable.Columns[i].Name) %> != null)
        {
            criteria.andEqualTo(<%= GetClassName(SourceTable) %>.$.<%= GetCamelCaseName(SourceTable.Columns[i].Name) %>,<%=GetCamelCaseName(SourceTable.Columns[i].Name)%>);
        }
        <%} else if(GetCSharpVariableType(SourceTable.Columns[i])=="Integer"){%>
        if(<%= GetCamelCaseName(SourceTable.Columns[i].Name) %> != null)
        {
            criteria.andEqualTo(<%= GetClassName(SourceTable) %>.$.<%= GetCamelCaseName(SourceTable.Columns[i].Name) %>,<%=GetCamelCaseName(SourceTable.Columns[i].Name)%>);
        }
        <%} else if(GetCSharpVariableType(SourceTable.Columns[i])=="Short"){%>
        if(<%= GetCamelCaseName(SourceTable.Columns[i].Name) %> != null)
        {
            criteria.andEqualTo(<%= GetClassName(SourceTable) %>.$.<%= GetCamelCaseName(SourceTable.Columns[i].Name) %>,<%=GetCamelCaseName(SourceTable.Columns[i].Name)%>);
        }
        <%}else if(GetCSharpVariableType(SourceTable.Columns[i])=="Byte"){%>
        if(<%= GetCamelCaseName(SourceTable.Columns[i].Name) %> != null)
        {
            criteria.andEqualTo(<%= GetClassName(SourceTable) %>.$.<%= GetCamelCaseName(SourceTable.Columns[i].Name) %>,<%=GetCamelCaseName(SourceTable.Columns[i].Name)%>);
        }
        <%}else if(GetCSharpVariableType(SourceTable.Columns[i])=="Long"){%>
        if(<%= GetCamelCaseName(SourceTable.Columns[i].Name) %> != null)
        {
            criteria.andEqualTo(<%= GetClassName(SourceTable) %>.$.<%= GetCamelCaseName(SourceTable.Columns[i].Name) %>,<%=GetCamelCaseName(SourceTable.Columns[i].Name)%>);
        }
        <%}}%>
        
        for(Sort.Order order : pageable.getSort()){
            if(order.getDirection().isAscending()) {
                example.orderBy(StringEscapeUtils.escapeSql(order.getProperty()));
            }
            else
            {
                example.orderBy(StringEscapeUtils.escapeSql(order.getProperty())).desc();
            }
        }

        Page retList = <%= GetVarName(SourceTable) %>Service.page(example,pageable.previousOrFirst());

        return new CommonPagerResponse<>(retList);
    }
    
    @ApiOperation("下拉列表")
    @RequestMapping(value = "/combox", method = RequestMethod.GET)
    @Access(value = AccessAdminConstants.<%= GetClassName(SourceTable).ToUpper() %>_COMBOX)
    public CommonResponse<List<ComboxDTO>> combox(
     <% for (int i = 0; i < SourceTable.Columns.Count; i++) {%>
        @RequestParam(required = false,value = "<%=GetCamelCaseName(SourceTable.Columns[i].Name)%>") <%= GetCSharpVariableType(SourceTable.Columns[i]) %> <%=GetCamelCaseName(SourceTable.Columns[i].Name)%>,
    <%}%>
            @AuthenticationPrincipal JwtUser jwtUser) {
            
        Example example = new Example(<%= GetClassName(SourceTable) %>.class);
        Example.Criteria criteria = example.createCriteria();

        <% for (int i = 0; i < SourceTable.Columns.Count; i++) {%>
        <%if(GetCSharpVariableType(SourceTable.Columns[i])=="String" && SourceTable.Columns[i].Size!=36){%>
        if(<%= GetCamelCaseName(SourceTable.Columns[i].Name) %> != null)
        {
            criteria.andLike(<%= GetClassName(SourceTable) %>.$.<%= GetCamelCaseName(SourceTable.Columns[i].Name) %>,"%"+ <%= GetCamelCaseName(SourceTable.Columns[i].Name) %>.trim()+ "%");
        }
        <%} else if(GetCSharpVariableType(SourceTable.Columns[i])=="String" && SourceTable.Columns[i].Size==36){%>
        if(<%= GetCamelCaseName(SourceTable.Columns[i].Name) %> != null)
        {
            criteria.andEqualTo(<%= GetClassName(SourceTable) %>.$.<%= GetCamelCaseName(SourceTable.Columns[i].Name) %>,<%=GetCamelCaseName(SourceTable.Columns[i].Name)%>);
        }
        <%} else if(GetCSharpVariableType(SourceTable.Columns[i])=="Integer"){%>
        if(<%= GetCamelCaseName(SourceTable.Columns[i].Name) %> != null)
        {
            criteria.andEqualTo(<%= GetClassName(SourceTable) %>.$.<%= GetCamelCaseName(SourceTable.Columns[i].Name) %>,<%=GetCamelCaseName(SourceTable.Columns[i].Name)%>);
        }
        <%} else if(GetCSharpVariableType(SourceTable.Columns[i])=="Short"){%>
        if(<%= GetCamelCaseName(SourceTable.Columns[i].Name) %> != null)
        {
            criteria.andEqualTo(<%= GetClassName(SourceTable) %>.$.<%= GetCamelCaseName(SourceTable.Columns[i].Name) %>,<%=GetCamelCaseName(SourceTable.Columns[i].Name)%>);
        }
        <%}else if(GetCSharpVariableType(SourceTable.Columns[i])=="Byte"){%>
        if(<%= GetCamelCaseName(SourceTable.Columns[i].Name) %> != null)
        {
            criteria.andEqualTo(<%= GetClassName(SourceTable) %>.$.<%= GetCamelCaseName(SourceTable.Columns[i].Name) %>,<%=GetCamelCaseName(SourceTable.Columns[i].Name)%>);
        }
        <%}else if(GetCSharpVariableType(SourceTable.Columns[i])=="Long"){%>
        if(<%= GetCamelCaseName(SourceTable.Columns[i].Name) %> != null)
        {
            criteria.andEqualTo(<%= GetClassName(SourceTable) %>.$.<%= GetCamelCaseName(SourceTable.Columns[i].Name) %>,<%=GetCamelCaseName(SourceTable.Columns[i].Name)%>);
        }
        <%}}%>
        
        return new CommonResponse<>(<%= GetVarName(SourceTable) %>Service.combox(example));
    }

}
 
<!-- #include file="script.inc" -->