<%@ Template Language="C#" TargetLanguage="Java" Encoding="UTF-8" ResponseEncoding="UTF-8"%>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System.Collections" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Collections" %>
package <%=Package%>.<%=Project%>.<%=Module%>.dto.vo;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;


/**
 *Name: <%=SourceTable.Description%>  查询结果翻页对象
 *Author: Caicai
 *Date: <%= DateTime.Now.ToString("yyyy-MM-dd") %>
 *Description: <%= String.Format("Copyright {0} CCai", DateTime.Now.ToString("yyyy")) %>
 */ 

<script runat="template">
public class MyCompare : System.Collections.IComparer
{
    public int Compare(object x, object y)
    {
        string a = ((ColumnSchema)x).Name;
        string b = ((ColumnSchema)y).Name;
        return a.CompareTo(b);
    }
}

MyCompare myCompare=new MyCompare();
//生成属性的时候，id总是在前面，后面依次是类型为Integer的类型，最后面是日期类型，剩下的按照字母排序放到中间。

//Integer的类型
ArrayList intList = new ArrayList();
//中间
ArrayList normalList = new ArrayList();
//日期类型
ArrayList dateList = new ArrayList();

//主键类型[目前不支持联合主键]
ArrayList pkList = new ArrayList();

ArrayList allList = new ArrayList();



</script>
@Data
@ApiModel(value="<%= GetClassName(SourceTable)%>QueryVo对象", description="<%= SourceTable.Description%>查询结果信息对象")
public class <%= GetClassName(SourceTable) %>QueryVo implements Serializable{

	<%
    for (int i = 0; i < SourceTable.Columns.Count; i++) { 
        ColumnSchema column = SourceTable.Columns[i];
        if(i==0){
            pkList.Add(column);
            continue;
        }
        
        string type = GetCSharpVariableType(column);
        switch(type){
            case "Integer":case "Long": {
    			 intList.Add(column);
    		}break;
            case "Date": {
    			 dateList.Add(column);
    		}break;
            default:
    		{
    			 normalList.Add(column);
    		}break;
        }
    }
    intList.Sort(myCompare);
    dateList.Sort(myCompare);
    normalList.Sort(myCompare);
    allList.AddRange(intList);
    allList.AddRange(normalList);
    allList.AddRange(dateList);
    %>
    
    <%
    for (int i = 0; i < pkList.Count; i++) { 
    ColumnSchema column = (ColumnSchema)pkList[i];
    string type = GetCSharpVariableType(column);
    %>
    <% if (!String.IsNullOrEmpty(column.Description)){%>
    @ApiModelProperty(name = "<%= GetCamelCaseName(column.Name) %>", value = "<%= FilterString(column.Description)%>")
    <%}%>
    private <%= GetCSharpVariableType(column) %> <%= GetCamelCaseName(column.Name) %>;
    <% if (i < allList.Count - 1) Response.Write("\r\n"); %>
    <%
    }
    %>
    <%
    for (int i = 0; i < allList.Count; i++) { 
    ColumnSchema column = (ColumnSchema)allList[i];
    string type = GetCSharpVariableType(column);
    %>
    <% if (!String.IsNullOrEmpty(column.Description)){%>
    @ApiModelProperty(name = "<%= GetCamelCaseName(column.Name) %>", value = "<%= FilterString(column.Description)%>")
    <%}%>
    private <%= GetCSharpVariableType(column) %> <%= GetCamelCaseName(column.Name) %>;
    <% if (i < allList.Count - 1) Response.Write("\r\n"); %>
    <%
    }
    %>
}
 
<!-- #include file="script.inc" -->