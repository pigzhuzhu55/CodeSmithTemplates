<%-- 
Name:
Author: byw
Description: 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." ResponseEncoding="utf-8" %>
<%@ Property Name="Tables" Type="SchemaExplorer.TableSchemaCollection" Category="Source" %>
<%@ Property Name="DevelopersName" Type="String" Category="Context" Default="Greatqn Templates V1.0" Description="The name to include in the comment header" %>
<%@ Property Name="ConnectString" Type="String" Category="Context" Default="MyConnectstring" Description="The ConnectString to use for this class" %>

<%@ Property Name="PathSpace" Type="String" Category="Path" Default="." Description="The path User \ or ." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %> 
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="SchemaExplorer" %>
<%
// This is done so that we can make some assumptions about what each table 
// can contain.
Tables = TableUtilities.FilterTables(Tables);
%>
<% if(!Directory.Exists(OutputDirectory)) Directory.CreateDirectory(OutputDirectory); %>
<% 
string SqlDirectory = OutputDirectory + PathSpace + "Sql\\";;
string EntDirectory = OutputDirectory + PathSpace + "Ent\\";
string EntBaseDirectory = OutputDirectory + PathSpace + "Ent\\Base\\";
string IDalDirectory = OutputDirectory + PathSpace + "IDal\\";
string DalFactoryDirectory = OutputDirectory + PathSpace + "DalFactory\\";
string DalDirectory = OutputDirectory + PathSpace + "SqlServerDal\\";
string DalBaseDirectory = OutputDirectory + PathSpace + "SqlServerDal\\Base\\";
string BizDirectory = OutputDirectory + PathSpace + "Biz\\";
string UIDirectory = OutputDirectory + PathSpace + "Web\\";

if(!Directory.Exists(SqlDirectory)) Directory.CreateDirectory(SqlDirectory);
if(!Directory.Exists(EntDirectory)) Directory.CreateDirectory(EntDirectory);
if(!Directory.Exists(EntBaseDirectory)) Directory.CreateDirectory(EntBaseDirectory);
if(!Directory.Exists(IDalDirectory)) Directory.CreateDirectory(IDalDirectory);
if(!Directory.Exists(DalFactoryDirectory)) Directory.CreateDirectory(DalFactoryDirectory);
if(!Directory.Exists(DalDirectory)) Directory.CreateDirectory(DalDirectory);
if(!Directory.Exists(DalBaseDirectory)) Directory.CreateDirectory(DalBaseDirectory);
if(!Directory.Exists(BizDirectory)) Directory.CreateDirectory(BizDirectory);
if(!Directory.Exists(UIDirectory)) Directory.CreateDirectory(UIDirectory);

%>
<% 
//Load Sub Template
CodeTemplate SqlObjectTemplate = GetCodeTemplate("SqlStoreProcedure.cst");
CodeTemplate EntObjectTemplate = GetCodeTemplate("Ent.cst");
CodeTemplate EntBaseObjectTemplate = GetCodeTemplate("EntBase.cst");
CodeTemplate IDalObjectTemplate = GetCodeTemplate("IDal.cst");
CodeTemplate DalFactoryObjectTemplate = GetCodeTemplate("DalFactory.cst");
CodeTemplate DalObjectTemplate = GetCodeTemplate("SqlServerDal.cst");
CodeTemplate DalBaseObjectTemplate = GetCodeTemplate("SqlServerDalBase.cst");
CodeTemplate BizObjectTemplate = GetCodeTemplate("Biz.cst");
CodeTemplate UIaspxObjectTemplate = GetCodeTemplate("UIaspx.cst");
CodeTemplate UIaspxcsObjectTemplate = GetCodeTemplate("UIaspxcs.cst");
CodeTemplate UIEditObjectTemplate = GetCodeTemplate("UIEdit.cst");
CodeTemplate UIEditcsObjectTemplate = GetCodeTemplate("UIEditcs.cst");
CodeTemplate Biz_ConfigObjectTemplate = GetCodeTemplate("Biz_Config.cst");
CodeTemplate DalFactory_UtilityObjectTemplate = GetCodeTemplate("DalFactory_Utility.cst");
CodeTemplate PageListTemplate = GetCodeTemplate("PageList.cst");
%>
Begin Building!

<% 
//Render Files
for (int i = 0; i < Tables.Count; i++)
{
	Response.WriteLine(string.Format("Building Table {0}",Tables[i].Name));
    RenderFileUsingProperties(EntDirectory + GetClassName(Tables[i]) + ".cs",true,ref EntObjectTemplate,Tables[i]);
    RenderFileUsingProperties(EntBaseDirectory + GetClassName(Tables[i]) + "Base.cs",true,ref EntBaseObjectTemplate,Tables[i]);
    RenderFileUsingProperties(IDalDirectory + "I" + GetClassName(Tables[i]) + "DR.cs",true,ref IDalObjectTemplate,Tables[i]);
    RenderFileUsingProperties(DalFactoryDirectory + GetClassName(Tables[i]) + "Dal.cs",true,ref DalFactoryObjectTemplate,Tables[i]);
    RenderFileUsingProperties(DalDirectory + GetClassName(Tables[i]) + "DR.cs",true,ref DalObjectTemplate,Tables[i]);
    RenderFileUsingProperties(DalBaseDirectory + GetClassName(Tables[i]) + "DRBase.cs",true,ref DalBaseObjectTemplate,Tables[i]);
    RenderFileUsingProperties(UIDirectory + GetClassName(Tables[i]) + "List.aspx",true,ref UIaspxObjectTemplate,Tables[i]);
    RenderFileUsingProperties(UIDirectory + GetClassName(Tables[i]) + "List.aspx.cs",true,ref UIaspxcsObjectTemplate,Tables[i]);
    RenderFileUsingProperties(UIDirectory + GetClassName(Tables[i]) + "Edit.aspx",true,ref UIEditObjectTemplate,Tables[i]);
    RenderFileUsingProperties(UIDirectory + GetClassName(Tables[i]) + "Edit.aspx.cs",true,ref UIEditcsObjectTemplate,Tables[i]);
}
    RenderFileUsingProperties(SqlDirectory + "\\build.sql",true,ref SqlObjectTemplate);
    RenderFileUsingProperties(BizDirectory + "\\BizHelper.cs",true,ref BizObjectTemplate);
    RenderFileUsingProperties(BizDirectory + "\\Config.cs",true,ref Biz_ConfigObjectTemplate);
    RenderFileUsingProperties(DalFactoryDirectory + "\\Utility.cs",true,ref DalFactory_UtilityObjectTemplate);
	RenderFileUsingProperties(UIDirectory + "index.html",true,ref PageListTemplate);

%>

Create completed!

<script runat="template">
#region Properties
    #region NameSpace
	private string _NameSpace = "Greatqn";
    [Category("Namespaces")]
	[Description("NameSpace for class.")]
    public string NameSpace
    {
     	get 
		{
			return _NameSpace;
		}
     	set 
    	{
    		_NameSpace = value;
    	}
    }
	#endregion
	
    #region Output
    private string _outputDirectory = String.Empty;
	
    [Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
	[CodeTemplateProperty(CodeTemplatePropertyOption.Optional)]
	[Category("Path")]
	[Description("The directory to output the results to.")]
	[DefaultValue("")]
	public string OutputDirectory 
	{ 
		get
		{
			if (_outputDirectory.Length == 0)
			{
				return @"E:\Ver\"+ this._NameSpace;
			}
			else
			{
				return _outputDirectory;
			}
		}
		set
		{
			if (value.EndsWith("\\")) value = value.Substring(0, value.Length - 1);
			_outputDirectory = value;
		} 
	}
	#endregion
#endregion

#region Methods
	#region Get Template
	public CodeTemplate GetCodeTemplate(string TemplateName) 
{ 
//CodeTemplate template=null; 
CodeTemplateCompiler compiler = new CodeTemplateCompiler(this.CodeTemplateInfo.DirectoryName+TemplateName); 
compiler.CodeTemplateInfo.ToString(); 
compiler.Compile(); 
if (compiler.Errors.Count == 0) 
{ 
return compiler.CreateInstance(); 
} 
else 
{ 
System.Text.StringBuilder errorMessage = new System.Text.StringBuilder(); 
for (int i = 0; i < compiler.Errors.Count; i++) 
{ 
errorMessage.Append(compiler.Errors[i].ToString()).Append("\n"); 
} 
throw new ApplicationException(errorMessage.ToString()); 
} 

return null; 
} 

	#endregion
	
	#region Render File
	/// Copies all properties to a template
	/// Renders the file 
	/// NB. the overrite property
	public void RenderFileUsingProperties(string fullPath, bool overrite, ref CodeTemplate template)
	{
		if( overrite || (!File.Exists(fullPath)) )
		{
			CopyPropertiesTo(template);
			template.RenderToFile(fullPath, overrite);
		}
	}
	
	/// Copies all properties to a template
	/// Renders the file 
	/// NB. the overrite property
	/// Set Property SourceTable
	public void RenderFileUsingProperties(string fullPath, bool overrite, ref CodeTemplate template,TableSchema SourceTable)
	{
		if( overrite || (!File.Exists(fullPath)) )
		{
			CopyPropertiesTo(template);
			template.SetProperty("SourceTable",SourceTable);
			template.RenderToFile(fullPath, overrite);
		}
	}
	
	/// Copies all properties to a template
	/// Renders the file  using the preserve regions merge stratagy
	public void MergeFileUsingPreserve(string fullPath, ref CodeTemplate template)
	{		
		CodeSmith.Engine.PreserveRegionsMergeStrategy preserveRegionsMergeStrategy = new PreserveRegionsMergeStrategy();
		preserveRegionsMergeStrategy.Language = "C#";
		preserveRegionsMergeStrategy.RegionNameRegex = "PRESERVE";
		CopyPropertiesTo(template);
		template.RenderToFile(fullPath,preserveRegionsMergeStrategy);
	}
	/// Copies all properties to a template
	/// Renders the file  using the preserve regions merge stratagy
	/// Set Property SourceTable
	public void MergeFileUsingPreserve(string fullPath, ref CodeTemplate template,TableSchema SourceTable)
	{		
		CodeSmith.Engine.PreserveRegionsMergeStrategy preserveRegionsMergeStrategy = new PreserveRegionsMergeStrategy();
		preserveRegionsMergeStrategy.Language = "C#";
		preserveRegionsMergeStrategy.RegionNameRegex = "PRESERVE";
		CopyPropertiesTo(template);
		template.SetProperty("SourceTable",SourceTable);
		template.RenderToFile(fullPath,preserveRegionsMergeStrategy);
	}
	/// Copies all properties to a template
	/// Renders the file  using the Insert Region merge strategy
	public void MergeFileUsingInsert(string fullPath, ref CodeTemplate template)
	{		
		CodeSmith.Engine.InsertRegionMergeStrategy mergeStrategy = new InsertRegionMergeStrategy();
		mergeStrategy.Language = "C#";
		mergeStrategy.RegionName = "PRESERVE";
		CopyPropertiesTo(template);
		template.RenderToFile(fullPath,mergeStrategy);
		
	}
	/// Copies all properties to a template
	/// Renders the file  using the Insert Region merge strategy
	/// Set Property SourceTable
	public void MergeFileUsingInsert(string fullPath, ref CodeTemplate template,TableSchema SourceTable)
	{		
		CodeSmith.Engine.InsertRegionMergeStrategy mergeStrategy = new InsertRegionMergeStrategy();
		mergeStrategy.Language = "C#";
		mergeStrategy.RegionName = "PRESERVE";
		CopyPropertiesTo(template);
		template.SetProperty("SourceTable",SourceTable);
		template.RenderToFile(fullPath,mergeStrategy);
		
	}
	#endregion
#endregion	

#region Inner Classes	
	#region TableUtilities Class
	public class TableUtilities
	{
		public static bool SkipTable(TableSchema table)
		{
			return (table.HasPrimaryKey == false || table.Columns.Count < 2);
		}
		public static TableSchemaCollection FilterTables(TableSchemaCollection tables)
        {			
            TableSchemaCollection filtered = new TableSchemaCollection();
            foreach(TableSchema table in tables) 
            {
                if(!SkipTable(table)) filtered.Add(table);
            }
            return filtered;
        }
	}
	
	public string GetClassName(TableSchema table)
	{
		return GetEntClassName(table);
	}

	#endregion
#endregion	

</script>
<!-- #include file="script.inc" -->