<%-- 
Name:
Author: 
Description: 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." ResponseEncoding="utf-8" %>
<%@ Property Name="DevelopersName" Type="String" Category="Context" Default="BabyGuardian v1.0" Description="The name to include in the comment header" %>
<%@ Property Name="NameSpace" Type="String" Category="Context" Default="BabyGuardian" Description="The namespace to use for this class" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using System.Data.Sql;
using System.Data.SqlClient;
using <%= NameSpace %>.Models;
using <%= NameSpace %>.Common.Data;

namespace <%= NameSpace %>.DataAccess
{
	/// <summary>
	/// File: <%= GetClassName(SourceTable) %>.cs 数据访问类
	/// </summary>
	/// <remarks>
	/// <para>Author: "<%= DevelopersName %>"</para>
	/// <para>Date: "<%= DateTime.Now.ToString("yyyy-MM-dd") %>"</para>
	/// <para>Version: "V1.0"</para>
	/// <para>Copyright: "<%= Copyright %>"</para>
	/// </remarks>
	public class <%= GetClassName(SourceTable) %>: RepositoryBase
	{
        public <%= GetClassName(SourceTable) %>(IConnectionProvider connectionProvider)
            : base(connectionProvider)
        {
        }
        
        #region  常用方法
        
        /// <summary>
		/// 增加一条数据
		/// </summary>
		/// <param name="entity">实体</param>
		/// <returns></returns>
        public object Add(<%= GetModelName(SourceTable)%> entity)
		{
            StringBuilder cmdText = new StringBuilder();
            cmdText.Append("INSERT INTO <%= SourceTable.Name%>(");
            <% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
            cmdText.Append("<%= SourceTable.NonPrimaryKeyColumns[i].Name+((i<SourceTable.NonPrimaryKeyColumns.Count-1)?",":")") %>");
            <% }%>
            cmdText.Append(" VALUES (");
            <% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
            cmdText.Append("@<%= SourceTable.NonPrimaryKeyColumns[i].Name+((i<SourceTable.NonPrimaryKeyColumns.Count-1)?",":")") %>");
            <% }%>
            cmdText.Append(";select @@IDENTITY;");
            SqlParameter[] parameters = 
			{
             <% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
                new SqlParameter("@<%= SourceTable.NonPrimaryKeyColumns[i].Name%>", <%=GetParamSqlDbType(SourceTable.NonPrimaryKeyColumns[i])%>) {Value=entity.<%=GetPascalCaseName(SourceTable.NonPrimaryKeyColumns[i].Name)%>},   
            <% }%>
            };
            return SqlHelper.ExecuteScalar(ReadConnectionString, CommandType.Text, cmdText.ToString(), parameters);
        }
        
        /// <summary>
		/// 更新一条数据
		/// </summary>
		/// <param name="entity">实体</param>
		/// <returns></returns>
        public bool Modify(<%= GetModelName(SourceTable)%> entity)
		{
            StringBuilder cmdText = new StringBuilder();
            cmdText.Append("UPDATE <%= SourceTable.Name%> SET ");
            <% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
            cmdText.Append("<%= SourceTable.NonPrimaryKeyColumns[i].Name%> = @<%= SourceTable.NonPrimaryKeyColumns[i].Name+((i<SourceTable.NonPrimaryKeyColumns.Count-1)?",":"")%>");
            <% }%>
            cmdText.Append(" WHERE <%= SourceTable.PrimaryKey.MemberColumns[0].Name%> = @<%= SourceTable.PrimaryKey.MemberColumns[0].Name%>");
            
            SqlParameter[] cmdParams = 
			{
             <% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
                new SqlParameter("@<%= SourceTable.NonPrimaryKeyColumns[i].Name%>", <%=GetParamSqlDbType(SourceTable.NonPrimaryKeyColumns[i])%>) {Value=entity.<%=GetPascalCaseName(SourceTable.NonPrimaryKeyColumns[i].Name)%>},   
            <% }%>
                new SqlParameter("@<%= SourceTable.PrimaryKey.MemberColumns[0].Name%>", <%=GetParamSqlDbType(SourceTable.PrimaryKey.MemberColumns[0])%>) {Value=entity.<%=GetPascalCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name)%>}, 
            };
            
            int  rows = SqlHelper.ExecuteNonQuery(ReadConnectionString, CommandType.Text, cmdText.ToString(), cmdParams);
			if (rows > 0)
			{
				return true;
			}
			else
			{
				return false;
			}
        }
        
        /// <summary>
		/// 删除一条数据
		/// </summary>
		/// <param name="id">主键</param>
		/// <returns></returns>
		public bool Del(<%= GetPrimaryKeyType(SourceTable) %> id)
		{
            StringBuilder cmdText = new StringBuilder();
			cmdText.Append("DELETE FROM <%= SourceTable.Name%> ");
			cmdText.Append(" WHERE <%= SourceTable.PrimaryKey.MemberColumns[0].Name%> = @<%= SourceTable.PrimaryKey.MemberColumns[0].Name%>");
            SqlParameter[] cmdParams = 
			{
				  new SqlParameter("@<%= SourceTable.PrimaryKey.MemberColumns[0].Name%>", <%=GetParamSqlDbType(SourceTable.PrimaryKey.MemberColumns[0])%>) {Value=id}, 
            };
            int  rows = SqlHelper.ExecuteNonQuery(ReadConnectionString, CommandType.Text, cmdText.ToString(), cmdParams);
			if (rows > 0)
			{
				return true;
			}
			else
			{
				return false;
			}
        }
        
        /// <summary>
		/// 得到一个对象实体
		/// </summary>
		/// <param name="id">主键</param>
		/// <returns>实体</returns>
        public <%= GetModelName(SourceTable)%> Get(<%= GetPrimaryKeyType(SourceTable) %> id)
        {
            StringBuilder cmdText=new StringBuilder();
            cmdText.Append("SELECT ");
             <% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
            cmdText.Append("<%= SourceTable.Columns[i].Name+((i<SourceTable.Columns.Count-1)?",":"") %>");
            <% }%>
            cmdText.Append(" FROM <%= SourceTable.Name%> ");
            cmdText.Append(" WHERE <%= SourceTable.PrimaryKey.MemberColumns[0].Name%> = @<%= SourceTable.PrimaryKey.MemberColumns[0].Name%>");
            SqlParameter[] parameters = 
			{
				  new SqlParameter("@<%= SourceTable.PrimaryKey.MemberColumns[0].Name%>", <%=GetParamSqlDbType(SourceTable.PrimaryKey.MemberColumns[0])%>) {Value=id}, 
            };
            
            <%= GetModelName(SourceTable)%> entity = null;
            using (var dataReader = SqlHelper.ExecuteReader(ReadConnectionString, CommandType.Text, cmdText.ToString(), parameters))
            {
                while (dataReader.Read())
                {
                    entity = FromIDataReader(dataReader);
                }
            }
            return entity;
        }
        
        /// <summary>
		/// 通过条件获取实体列表
		/// </summary>
		/// <param name="whereSql">条件</param>
		/// <returns>实体列表</returns>
        public List<<%= GetModelName(SourceTable)%>> GetList(string whereSql)
        {
            StringBuilder cmdText=new StringBuilder();
            cmdText.Append("SELECT ");
             <% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
            cmdText.Append("<%= SourceTable.Columns[i].Name+((i<SourceTable.Columns.Count-1)?",":"") %>");
            <% }%>
            cmdText.Append(" FROM <%= SourceTable.Name%> ");
            if(!string.IsNullOrEmpty(whereSql))
            {
                cmdText.Append("WHERE " + whereSql);
            }
            
            List<<%= GetModelName(SourceTable)%>> list = new List<<%= GetModelName(SourceTable)%>>();
            using (var dataReader = SqlHelper.ExecuteReader(ReadConnectionString, CommandType.Text, cmdText.ToString()))
            {
                while (dataReader.Read())
                {
                    <%= GetModelName(SourceTable)%> entity = FromIDataReader(dataReader);
                    list.Add(entity);
                }
            }
            return list;
        }
        
        /// <summary>
        /// 获得数据列表 带分页
        /// </summary>
        /// <param name="searchCondition">条件</param>
        /// <param name="orderExpression">排序字段</param>
        /// <param name="pageIndex">页码</param>
        /// <param name="pageSize">每页大小</param>
        /// <param name="recordCount">返回总条数</param>
        /// <returns></returns>
        public List<<%= GetModelName(SourceTable)%>> GetListByProc(string searchCondition, string orderExpression,int pageIndex, int pageSize, out int recordCount)
        {
            recordCount = 0;

            SqlParameter[] parameters = new SqlParameter[] 
			{
				SqlParamHelper.MakeParam("@RecordNum",SqlDbType.Int,4, ParameterDirection.InputOutput, recordCount),
				SqlParamHelper.MakeInParam("@SelectList",SqlDbType.VarChar,2000,"<%= GetColumnsString(SourceTable)%>"),
				SqlParamHelper.MakeInParam("@TableSource",SqlDbType.VarChar,100,"<%= SourceTable.Name%> with(nolock)"),
                SqlParamHelper.MakeInParam("@PrimaryKeyField", SqlDbType.VarChar, 255, "<%= SourceTable.PrimaryKey.MemberColumns[0].Name%>"),
				SqlParamHelper.MakeInParam("@SearchCondition",SqlDbType.VarChar,2000, searchCondition),
				SqlParamHelper.MakeInParam("@OrderExpression",SqlDbType.VarChar,1000, orderExpression),
				SqlParamHelper.MakeInParam("@PageSize",SqlDbType.Int,4,pageSize),
				SqlParamHelper.MakeInParam("@PageIndex",SqlDbType.Int,4,pageIndex)
			};
            
            List<<%= GetModelName(SourceTable)%>> list = new List<<%= GetModelName(SourceTable)%>>();
            using (IDataReader dataReader = SqlHelper.ExecuteReader(ReadConnectionString, CommandType.StoredProcedure, "PR_GetDataByPageIndex", parameters))
            {
                while (dataReader.Read())
                {
                    <%= GetModelName(SourceTable)%> entity = FromIDataReader(dataReader);
                    list.Add(entity);
                }
            }
            recordCount = Convert.ToInt32(parameters[0].Value);
            return list;
        }
        
        /// <summary>
        /// 绑定单行记录到实体
        /// </summary>
        /// <param name="dr"></param>
        /// <returns></returns>
        private <%= GetModelName(SourceTable)%> FromIDataReader(IDataRecord dr)
        {
            <%= GetModelName(SourceTable)%> obj = new <%= GetModelName(SourceTable)%>();
            try {
			    <% for (int i=0; i < SourceTable.Columns.Count; ++i) { %>
				<%BuildPopulateValue(SourceTable.Columns[i]);%>
			    <%}%>
			}
			catch(Exception ex)
			{
				throw new Exception("从DataReader中读取数据失败，可能与相关的字段不存在有关！请检查！||"+ex.Message+"||"+ex.Source);
			}
			return obj;
        }
        
        #endregion
        
        #region  扩展方法
        
        #endregion
        
    }
    
    
}
<script runat="template">
public string GetClassName(TableSchema table)
{
	return GetEntClassName(table)+"Repository";
}

public string GetModelName(TableSchema table)
{
    return GetEntClassName(table);
}
</script>
<!-- #include file="script.inc" -->